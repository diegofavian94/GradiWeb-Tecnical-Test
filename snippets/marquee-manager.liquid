<script>
  /**
 * MarqueeManager handles the creation and management of marquee-style scrolling text.
 * It automatically calculates and duplicates content to ensure smooth, continuous scrolling
 * across different screen sizes.
 */
  class MarqueeManager {
    /**
   * Creates a new MarqueeManager instance.
   * @param {HTMLElement} contentElement - The DOM element containing the content to be repeated
   * @param {Object} options - Configuration options
   * @param {number} [options.speed=20] - Scrolling speed in pixels per second TODO
   * @param {number} [options.padding=20] - Padding between repeated elements in pixels TODO
   */
    constructor(contentElement, options = {}) {
      this.content = contentElement;
      this.options = {
        speed: options.speed || 20,
        padding: options.padding || 20,
        ...options
      };
      this.originalText = this.content.innerHTML;
      this.init();
    }

    /**
   * Initializes the marquee content and sets up event listeners.
   * Uses requestAnimationFrame for smooth initial render and adds
   * a fallback timeout to handle edge cases.
   * @private
   */
    init() {
      requestAnimationFrame(() => {
        this.updateContent();
        
        // Sometimes it bugs, so better to add a small delay
        setTimeout(() => {
          this.updateContent();
        }, 100);
      });

      window.addEventListener('resize', () => this.updateContent());
    }

    /**
   * Calculates required repetitions and updates the content accordingly.
   * Ensures content fills twice the container width plus one repetition
   * to maintain smooth scrolling effect.
   * @private
   */
    updateContent() {
      const containerWidth = this.content.parentElement.offsetWidth;
      const itemWidth = this.content.children[0].offsetWidth;
      const repetitions = Math.ceil((containerWidth * 2) / itemWidth) + 1;
      
      this.content.innerHTML = '';
      
      for (let i = 0; i < repetitions; i++) {
        this.content.innerHTML += this.originalText;
      }
    }

    destroy() {
      window.removeEventListener('resize', () => this.updateContent());
    }
  }
</script>